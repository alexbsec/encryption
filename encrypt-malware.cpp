#include <iostream>
#include <fstream>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>


void encryptFile(std::string filePath)
{
    std::fstream file, tempFile;                    // file var is the file to be encrypted. tempFile var is a temperary file which saves
                                                    // encrypted data of file var
    std::string tempFilePath = "temp.txt";

    file.open(filePath, std::ios::in);              // file is opened in input mode
    tempFile.open(tempFilePath, std::ios::out);     // tempFile is opened in output mode

    char byte;
    while (file >> std::noskipws >> byte)
    {
        byte += 1;                                  // Encrypt this byte by add 1 to it
        tempFile << byte;
    }

    file.close();
    tempFile.close();

    file.open(filePath, std::ios::out);             // file is opened in output mode
    tempFile.open(tempFilePath, std::ios::in);      // tempFile is opened in input mode

    while (tempFile >> std::noskipws >> byte)
    {
        file << byte;                               // Save byte into file
    }

    file.close();
    tempFile.close();

    remove(tempFilePath.c_str());
}

void encryptDir(std::string dirPath) {
    DIR* directory;                                 // used to keep track of the current directory being processed
    struct dirent* entry;                           // used to represent each entry in the directory
    struct stat status;                             // used to check the type of each entry in the directory
    std::string path;                               // used to store the full path of each entry

    if ( (directory = opendir(dirPath.c_str())) != NULL ){
        while ( (entry = readdir(directory)) != NULL ) {
            if (strcmp(entry -> d_name, ".") != 0 && strcmp(entry -> d_name, "..") != 0)  {
                path = dirPath + "\\" + entry -> d_name;

                stat(path.c_str(), &status);

                if (S_ISDIR(status.st_mode)) {
                    encryptDir(path);
                } else {
                    encryptFile(path);
                }
            }
        }
    }
}